Q.1 Whatâ€™s difference between Synchronous and Asynchronous?
Synchronous and asynchronous refer to different ways of handling tasks or operations.
Synchronous operations happen one after the other, in a sequential manner. When you perform a synchronous task, you need to wait for it to finish before moving on to the next task. It's like standing in a queue where each person needs to wait for the person in front to complete their task before they can proceed. In programming, this means that the code execution is blocked until the task is completed.
Asynchronous operations, on the other hand, don't require waiting. When you perform an asynchronous task, you can move on to other tasks without waiting for the first task to finish. It's like sending a request and continuing with your work while waiting for the response to arrive. In programming, this means that the code execution can continue even if the task is not completed yet. When the task is finished, a callback function or a promise is used to handle the result.
In simple terms, synchronous tasks are like following a strict order where one thing happens after the other, while asynchronous tasks allow you to multitask and continue with other things while waiting for a task to complete.
Asynchronous operations are commonly used in situations where tasks may take longer to complete, such as making network requests, reading files, or waiting for user input. They help prevent blocking the entire program and enable more efficient use of system resources.