Q.9 Explain fetch

`fetch` is a built-in function in JavaScript that allows you to make HTTP requests to retrieve resources from a network. It is a modern and flexible replacement for older techniques like XMLHttpRequest.

The `fetch` function is used to send HTTP requests and returns a Promise that resolves to the response from the server. It provides a simple and standardized way to interact with web APIs and retrieve data.

Here's a basic example of using `fetch` to make a GET request and handle the response:

```javascript
fetch('https://api.example.com/data')
  .then((response) => {
    if (response.ok) {
      // HTTP response is successful
      return response.json(); // Parse response body as JSON
    } else {
      // Handle error case
      throw new Error('Request failed');
    }
  })
  .then((data) => {
    // Process the retrieved data
    console.log('Data:', data);
  })
  .catch((error) => {
    // Handle any errors that occurred during the request
    console.error('Error:', error);
  });
```

In this example, `fetch` is used to send a GET request to `'https://api.example.com/data'`. The `then` method is called on the returned promise to handle the response. If the response is successful (`response.ok` is `true`), the response body is parsed as JSON using `response.json()`. If any error occurs during the request, the `catch` block is executed to handle and log the error.

`fetch` supports various HTTP methods such as GET, POST, PUT, DELETE, etc. You can provide additional parameters to the `fetch` function to configure the request, including headers, request body, and authentication credentials.

`fetch` is widely used in web development for communicating with APIs, fetching data from servers, and performing CRUD (Create, Read, Update, Delete) operations. It provides a convenient and powerful way to retrieve and work with data from external sources in JavaScript applications.